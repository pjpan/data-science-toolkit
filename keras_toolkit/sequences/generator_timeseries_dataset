import tensorflow as tf
import numpy as np


def timeseries_dataset_multistep(features, labels, input_sequence_length, output_sequence_length, batch_size):
    def extract_output(l):
        return l[:output_sequence_length]

    feature_ds = tf.keras.preprocessing.timeseries_dataset_from_array(features, None, input_sequence_length, batch_size=1).unbatch()
    label_ds = tf.keras.preprocessing.timeseries_dataset_from_array(labels, None, input_sequence_length, batch_size=1) \
        .skip(input_sequence_length) \
        .unbatch() \
        .map(extract_output)

    return tf.data.Dataset.zip((feature_ds, label_ds)).batch(batch_size)


def timeseries_dataset_one_step(features, labels, input_sequence_length, batch_size):
    return tf.keras.preprocessing.timeseries_dataset_from_array(features[:-1], \
            np.roll(labels, -input_sequence_length, axis=0)[:-1], \
            input_sequence_length, batch_size=batch_size)


def timeseries_dataset_multistep_combined(features, label_slice, input_sequence_length, output_sequence_length, batch_size):
    feature_ds = tf.keras.preprocessing.timeseries_dataset_from_array(features, None, input_sequence_length + output_sequence_length, batch_size=batch_size)

    def split_feature_label(x):
        return x[:, :input_sequence_length, :], x[:, input_sequence_length:, label_slice]

    feature_ds = feature_ds.map(split_feature_label)

    return feature_ds


def print_dataset(ds):
    for inputs, targets in ds:
        print("---Batch---")
        print("Feature:", inputs.numpy())
        print("Label:", targets.numpy())
        print("")


def print_generator(gen):
    for inputs, targets in gen:
        print("---Batch---")
        print("Feature:", inputs)
        print("Label:", targets)
        print("")
